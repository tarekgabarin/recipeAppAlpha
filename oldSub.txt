router.post('/recommended', authentication.verifyOrdinaryUser, (req, res) => {

    console.log('In subscribed, req.decoded.id is....' + req.decoded.id);

    let recipeArr = [];

    let subCounter = 0;

    User.findOne({_id: req.decoded.id}).then((user) => {

        console.log('user.subscribedTo is...' + user.subscribedTo);


         for (let i = 0; i < user.subscribedTo.length; i++){

             subCounter = i;

             console.log('subCounter is...' + subCounter);

            User.findOne({_id: user.subscribedTo[i].userid, creationDate: user.subscribedTo[i].creationDate}).then((chef) => {



                console.log('chef is...' + chef);

                for (let i = 0; i < chef.usersRecipes.length; i++){

                    console.log('subCounter is now...' + subCounter);

                    console.log('recipeArr is now...' + recipeArr);

                    Recipe.find({_id: chef.usersRecipes[i].recipeId, postersCreationDate: chef.usersRecipes[i].creationDate}).then((recipe) => {

                        console.log('recipe is...' + recipe);

                        recipeArr.push(recipe);

                    })

                }

            });

         }

        let subCountPromise = () => {

            return new Promise((resolve, reject) => {

                if (subCounter === user.subscribedTo.length){

                    resolve(recipeArr);


                }

                    })


        };

        subCountPromise().then(() => {

            console.log('entering callback, recipeArr is now...' + recipeArr);



          res.json(recipeArr);



        })



    });




});


/// Other one that is less shitty but don't work

router.post('/recommended', authentication.verifyOrdinaryUser, (req, res) => {

    console.log('In subscribed, req.decoded.id is....' + req.decoded.id);

    let recipeArr = [];

    let subCounter = 0;

    let recipeCounter = 0;

    User.findOne({_id: req.decoded.id}).then((user) => {

        console.log('user.subscribedTo is...' + user.subscribedTo);

        console.log('Within User.findOne.then, subCounter is ' + subCounter);


         for (let i = 0; i < user.subscribedTo.length; i++){

             console.log('subCounter is...' + subCounter);

            User.findOne({_id: user.subscribedTo[i].userid, creationDate: user.subscribedTo[i].creationDate}).then((chef) => {

                console.log('chef is...' + chef);

                    for (let l = 0; l < chef.usersRecipes.length; l++){

                        console.log('subCounter is now...' + subCounter);

                        console.log('recipeArr is now...' + recipeArr);

                        let getRecipePromise = () => {

                            return new Promise((resolve, reject) => {

                                if (recipeCounter > chef.usersRecipes.length){

                                    resolve()

                                }
                            })

                        };

                        Recipe.find({_id: chef.usersRecipes[l].recipeId, postersCreationDate: chef.usersRecipes[l].creationDate}).then((recipe) => {

                            console.log('recipe is...' + recipe);

                            recipeArr.push(recipe);

                            recipeCounter = l;

                            console.log('In Recipe find, recipeCounter is now...' + recipeCounter);

                            console.log('In Recipe find, subCounter is now...' + subCounter);

                            console.log('in Recipe find, i is now...' + i);

                            console.log('in Recipe find, l is now...' + l);

                            console.log('in Recipe find, recipeArr is' + recipeArr);


                        });

                        getRecipePromise().then(() => {

                            subCounter = i;

                            recipeCounter = 0;

                            console.log('In getRecipePromise, subCounter is...' + subCounter);

                            console.log('In getRecipePomise, recipeCounter is...' + recipeCounter);
                        });

                    }



            });

         }

        let subCountPromise = () => {

             console.log('running subCountPromise');

            return new Promise((resolve, reject) => {

                if (subCounter === user.subscribedTo.length){

                    resolve(recipeArr);


                }

                    })


        };

        subCountPromise().then(() => {

            console.log('entering callback, recipeArr is now...' + recipeArr);



          res.json(recipeArr);



        })



    });




});


//// Old deactivate account


router.put('/manage-account/deactivate', authentication.verifyOrdinaryUser, (req, res, next) => {


    let recipeIdArr = [];


    /// first delete all the recipes you've made as well as the reviews

    User.findOne({_id: req.decoded.id, creationDate: req.decoded.creationDate}).then((user) => {

        console.log('user is....' + user);

        user.set('isActive', false);

        user.save();

        console.log('user document updated');

        for (let i = 0; i < user.usersRecipes.length; i++){

            console.log('user.usersFavouriteRecipes[i].recipeId: ' + user.usersFavouriteRecipes[i].recipeId);

            console.log('user.usersFavouriteRecipes[i].creationDate: ' + user.usersFavouriteRecipes[i].creationDate);

            Recipe.findOneAndUpdate({_id: user.usersFavouriteRecipes[i].recipeId, creationDate: user.usersFavouriteRecipes[i].creationDate}, {$set: {isActive: false}}).then(() => {
                    console.log('Recipe updated!');
                })

        }

        let makeArrPromise = () => {

            for (let l = 0; l < user.usersReviews.length; l++) {

                recipeIdArr.push(user.usersReviews[i].recipeId);

            }

            console.log('recipeIdArr is...' + recipeIdArr);

            console.log('recipeIdArr.length is...' + recipeIdArr);

            console.log('user.usersReviews.length is....' + user.usersReviews.length);

            if (recipeIdArr.length === user.usersReviews.length){
                resolve();
            }


        };

        makeArrPromise().then(() => {

            Recipe.find({_id: {$in: recipeIdArr}}).then((recipes) => {

                for (let i = 0; i < recipes.reviewsOfRecipe.length; i++){

                    console.log('recipes.reviewsOfRecipe[i].postedBy is...' + recipes.reviewsOfRecipe[i].postedBy);

                    console.log('user._id...' + user._id);

                    if (recipes.reviewsOfRecipe[i].postedBy === String(user._id)){

                        recipes.reviewsOfRecipe[i].isActive = false;

                        console.log('recipes.reviewsOfRecipe[i].isActive is now....' + recipes.reviewsOfRecipe[i].isActive);

                        recipes.save();

                    }
                }

            })

        });



        res.send(user);





    });

});
